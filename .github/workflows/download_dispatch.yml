name: 下载JM本子 (dispatch)

on:
  workflow_dispatch:
    inputs:
      JM_ALBUM_IDS:
        type: string
        description: 本子id（多个id用-隔开，如 '123-456-789'）
        required: false

      JM_PHOTO_IDS:
        type: string
        description: 章节id（单独下载章节，多个id同上）
        required: false

      CLIENT_IMPL:
        type: string
        description: 客户端类型（client.impl），下载失败时，你可以尝试填入此项重试。'api' 表示移动端，'html' 表示网页端。
        default: ''
        required: false

      IMAGE_SUFFIX:
        type: string
        description: 图片后缀（download.cache.suffix），默认为空，表示不做图片格式转换。可填入例如 'png' 'jpg'
        default: ''
        required: false

      DIR_RULE:
        type: string
        description: 下载文件夹规则（dir_rule.rule）。默认使用配置文件的 'Bd_Aauthor_Atitle_Pindex'。
        default: ''
        required: false
        
      # ⭐ 修改：改为选择输出格式
      OUTPUT_FORMAT:
        type: choice
        description: 输出格式选择
        required: true
        default: 'pdf_only'
        options:
          - pdf_only       # 只保留PDF（删除原图）
          - images_only    # 只保留原图（不转PDF）

      # 邮件选项
      EMAIL_TO_INPUT:
        type: string
        description: 收件人邮箱（可选，不填则不发送邮件）
        default: ''
        required: false
        
      ZIP_NAME:
        type: string
        default: 本子.tar.gz
        description: 压缩文件名称
        required: false

      UPLOAD_NAME:
        type: string
        default: Click me to download
        description: 上传文件名称
        required: false


jobs:
  crawler:
    runs-on: ubuntu-latest
    env:
      # 工作流输入
      JM_ALBUM_IDS: ${{ github.event.inputs.JM_ALBUM_IDS }}
      JM_PHOTO_IDS: ${{ github.event.inputs.JM_PHOTO_IDS }}
      DIR_RULE: ${{ github.event.inputs.DIR_RULE }}
      CLIENT_IMPL: ${{ github.event.inputs.CLIENT_IMPL }}
      ZIP_NAME: ${{ github.event.inputs.ZIP_NAME }}
      UPLOAD_NAME: ${{ github.event.inputs.UPLOAD_NAME }}
      IMAGE_SUFFIX: ${{ github.event.inputs.IMAGE_SUFFIX }}
      OUTPUT_FORMAT: ${{ github.event.inputs.OUTPUT_FORMAT }}  # ⭐ 新增：输出格式
      
      # 登录相关secrets
      JM_USERNAME: ${{ secrets.JM_USERNAME }}
      JM_PASSWORD: ${{ secrets.JM_PASSWORD }}

      # 邮件相关secrets
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      EMAIL_TO: ${{ github.event.inputs.EMAIL_TO_INPUT || secrets.EMAIL_TO }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      EMAIL_TITLE: ${{ secrets.EMAIL_TITLE }}
      EMAIL_CONTENT: ${{ secrets.EMAIL_CONTENT }}

      # 固定值
      JM_DOWNLOAD_DIR: /home/runner/work/jmcomic/download/

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependency
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      # ⭐ 修改：根据选择决定是否安装 img2pdf
      - name: 安装 img2pdf（仅PDF模式）
        if: ${{ github.event.inputs.OUTPUT_FORMAT == 'pdf_only' }}
        run: |
          pip install img2pdf
          echo "✅ 已安装 img2pdf（PDF转换模式）"
          
      - name: 安装jmcomic（pip）
        if: ${{ github.ref != 'refs/heads/dev' }}
        run: |
          pip install jmcomic -i https://pypi.org/project --upgrade

      - name: 安装jmcomic（local）
        if: ${{ github.ref == 'refs/heads/dev' }}
        run: |
          pip install -e ./
          
      # ⭐ 新增：显示当前输出模式
      - name: 显示输出模式
        run: |
          echo "========================================"
          echo "📦 输出模式配置"
          echo "========================================"
          if [ "$OUTPUT_FORMAT" = "pdf_only" ]; then
            echo "📄 模式: 只保留PDF（将删除原始图片）"
            echo "   - ✅ 启用 PDF 转换"
            echo "   - ❌ 最终删除原始图片"
          else
            echo "🖼️  模式: 只保留原图（不进行PDF转换）"
            echo "   - ❌ 不进行 PDF 转换"
            echo "   - ✅ 保留原始图片"
          fi
          echo "========================================"
          
      # ⭐ 新增：根据模式修改配置文件
      - name: 配置下载选项
        run: |
          CONFIG_FILE="assets/option/option_workflow_download.yml"
          
          if [ "$OUTPUT_FORMAT" = "images_only" ]; then
            # 只保留原图模式：注释掉 img2pdf 插件
            echo "🔧 禁用 PDF 转换插件..."
            sed -i '/after_album:/,/pdf_dir:/ s/^/#/' "$CONFIG_FILE"
            sed -i '/filename_rule: Aname/,/^  after_download:/ s/^/#/' "$CONFIG_FILE"
            echo "✅ 已禁用 PDF 转换"
          else
            echo "✅ 保持 PDF 转换插件启用"
          fi
          
          echo "当前配置文件内容："
          cat "$CONFIG_FILE"
          
      - name: 检查邮件配置
        run: |
          echo "========================================"
          echo "📧 邮件配置检查"
          echo "========================================"
          
          if [ -n "$EMAIL_FROM" ]; then
            echo "✅ EMAIL_FROM: ${EMAIL_FROM:0:3}***@${EMAIL_FROM##*@}"
          else
            echo "❌ EMAIL_FROM: 未配置"
          fi
          
          if [ -n "$EMAIL_TO" ]; then
            echo "✅ EMAIL_TO: ${EMAIL_TO:0:3}***@${EMAIL_TO##*@}"
          else
            echo "❌ EMAIL_TO: 未配置（不会发送邮件）"
          fi
          
          if [ -n "$EMAIL_PASS" ]; then
            echo "✅ EMAIL_PASS: ${EMAIL_PASS:0:4}************"
          else
            echo "❌ EMAIL_PASS: 未配置"
          fi
          
          if [ -n "$EMAIL_TITLE" ]; then
            echo "✅ EMAIL_TITLE: $EMAIL_TITLE"
          else
            echo "⚠️  EMAIL_TITLE: 未配置（将使用默认标题）"
          fi
          
          if [ -n "$EMAIL_CONTENT" ]; then
            echo "✅ EMAIL_CONTENT: $EMAIL_CONTENT"
          else
            echo "⚠️  EMAIL_CONTENT: 未配置（将使用默认内容）"
          fi
          
          echo "========================================"
          
          if [ -z "$EMAIL_FROM" ] || [ -z "$EMAIL_TO" ] || [ -z "$EMAIL_PASS" ]; then
            echo "⚠️  警告: 邮件配置不完整，将不会发送邮件"
          else
            echo "✅ 邮件配置完整，下载完成后将发送邮件"
          fi
          
      - name: 运行下载脚本
        run: |
          cd ./usage/
          python workflow_download.py
          
      # ⭐ 修改：根据模式处理文件
      - name: 处理输出文件
        run: |
          cd $JM_DOWNLOAD_DIR
          
          if [ "$OUTPUT_FORMAT" = "pdf_only" ]; then
            echo "📄 处理模式：只保留PDF"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # 统计原始文件
            IMAGE_COUNT=$(find . -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" \) | wc -l)
            echo "📊 原始图片数量: $IMAGE_COUNT"
            
            # 删除原始图片
            find . -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" \) -delete
            rm -f 【出错了】*.log
            find . -type d -empty -delete
            
            echo "✅ 已删除原始图片，只保留PDF文件"
            
          elif [ "$OUTPUT_FORMAT" = "images_only" ]; then
            echo "🖼️  处理模式：只保留原图"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # 删除PDF目录（如果存在）
            if [ -d "pdf" ]; then
              PDF_COUNT=$(find pdf -name "*.pdf" 2>/dev/null | wc -l)
              echo "📊 删除 PDF 文件数量: $PDF_COUNT"
              rm -rf pdf
            fi
            
            # 统计保留的图片
            IMAGE_COUNT=$(find . -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" \) | wc -l)
            echo "📊 保留的图片数量: $IMAGE_COUNT"
            
            rm -f 【出错了】*.log
            find . -type d -empty -delete
            
            echo "✅ 已删除PDF文件，只保留原始图片"
          fi
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📦 最终文件统计："
          du -sh . 2>/dev/null | awk '{print "总大小: " $1}'
          find . -type f | wc -l | awk '{print "文件数量: " $1}'
          
      # ⭐ 修改：根据模式检查文件
      - name: 检查输出文件
        run: |
          echo "========================================"
          echo "📂 文件检查"
          echo "========================================"
          
          if [ "$OUTPUT_FORMAT" = "pdf_only" ]; then
            if [ -d "$JM_DOWNLOAD_DIR/pdf" ]; then
              PDF_COUNT=$(find $JM_DOWNLOAD_DIR/pdf -name "*.pdf" 2>/dev/null | wc -l)
              echo "✅ PDF模式 - PDF文件数量: $PDF_COUNT"
              if [ $PDF_COUNT -gt 0 ]; then
                echo ""
                echo "PDF文件列表:"
                find $JM_DOWNLOAD_DIR/pdf -name "*.pdf" -exec ls -lh {} \;
                echo ""
                echo "PDF总大小: $(du -sh $JM_DOWNLOAD_DIR/pdf 2>/dev/null | cut -f1)"
              fi
            else
              echo "⚠️  警告: PDF目录不存在"
            fi
            
          elif [ "$OUTPUT_FORMAT" = "images_only" ]; then
            IMAGE_COUNT=$(find $JM_DOWNLOAD_DIR -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" \) | wc -l)
            echo "✅ 原图模式 - 图片文件数量: $IMAGE_COUNT"
            if [ $IMAGE_COUNT -gt 0 ]; then
              echo ""
              echo "图片总大小: $(du -sh $JM_DOWNLOAD_DIR 2>/dev/null | cut -f1)"
            fi
          fi
          
          echo "========================================"

      - name: 压缩文件
        run: |
          cd $JM_DOWNLOAD_DIR
          tar -zcvf "../$ZIP_NAME" ./
          mv "../$ZIP_NAME" .

      - name: 上传结果
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.UPLOAD_NAME }}
          path: ${{ env.JM_DOWNLOAD_DIR }}/${{ env.ZIP_NAME }}
          if-no-files-found: error
          retention-days: 90
          
      # ⭐ 修改：邮件通知（适配不同模式）
      - name: 发送邮件通知
        if: ${{ env.EMAIL_TO != '' && env.EMAIL_FROM != '' && env.EMAIL_PASS != '' }}
        continue-on-error: true
        run: |
          echo "📧 准备发送邮件..."
          
          # 根据模式调整邮件内容
          if [ "$OUTPUT_FORMAT" = "pdf_only" ]; then
            echo "模式：PDF文件"
          else
            echo "模式：原始图片"
          fi
          
          python assets/send_email_with_pdf.py
          echo "✅ 邮件任务完成"
